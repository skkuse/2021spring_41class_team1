안이은: 저희 5분에 시작하도록할게용 확인하셨으면 밑에 기록 남겨주세요

김지훈: 네

양유진: 네 확인했습니다

박정인: 확인했습니다

이성원: 확인했습니다

양유진: 슬랙 메인으로 오늘 하기로 해요~

이성원: 넵

안이은: 먼저 3번문제 관련해서 discuss.. 해보겠습니다!

안이은: 먼저 공유해주실 분 계신가요?

양유진: 저는 3번을 제일 간단하게 적어봤는데요. 교수님도 자세히 설명하신것 같지는 않아서 HW, SW, operator가 independent하지 않다.

양유진: 그래서 하나의 failure가 다른 failure로 이어질 수 있다. propagate될 수 있다 적었습니다.

안이은: 다른분

안이은: 또계신가요?

이성원: 저는 좀 더 예시측면으로 들었는데

이성원: 시스템의 요소들은 서로 의존도가 있어서 한곳에서 에러가 터지면 다른 영역으로 퍼지게 된다. 하드웨어에서 오류가 나면 그로인해 잘못된 신호를 받은 소프트웨어에도 오류가 나게 되고, 이 오류를 본 오퍼레이터는 그걸 고치려고 하겠지만, 되려 다른 실수를 소프트웨어에 가하게 될 수 있다. 잘못된 소프트웨어는 다시 하드웨어로 이상한 지시를 내리게 될 수 있다.

이성원: 그런 느낌이지 않을까 싶습니다

김지훈: Failure from hardware: affects the software and its effect on the operation
Failure from software: not always affect hardware because we can design barriers

소프트웨어적인 오류는 하드웨어에 저장되기 전까지 추가 작업을 통해서 완화 할 수 있다.

박정인: 하드웨어에서 failure 가 발생하면 error 신호가 발생해서, 소프트웨어 부분에 잘못된 알람을 발생시킬 수 있다. 정도로 하면 좀 더 디테일할 것 같아요

안이은: 저도 성원님이랑 비슷하게 예시로 들었는데, 하드웨어에서 연산이 불가하면 소프트웨어가 의도한 연산을 해낼 수 없다

안이은: 결국 오퍼레이터도 예상밖의 프로세스를 발생시킬 수 있다..요런식으로 적었어요

정세린: 저는
각각 독립적으로 failure이 발생하는 것이 아니라, 전부 상호작용을 통해서 일어난다.
 한 부분에서의 failure이  다른 failure을 야기하는 식으로 failure이 propagate된다.
이렇게 적었급니다!

안이은: 그 반대방향으로 오퍼레이터가 예상밖의 프로세스를 했을때 소프트웨어가 무한루프 돌게되면 하드웨어에 과부하.. 요런거도 적어보았습니다

안이은: 그럼 모두 말씀하신 것 같아서 4번으로 넘어가보겠습니다

이성원: 저는 4가지  process 의 인과관계를 좀 고려해봤습니다.

이성원: 컨셉츄얼 디자인에서 목적과 소비자 요구사항을 파악하면 그건 기반으로 procurement에서 기능성에 대한 비중 분배와 써먹을 요소들을 구한다. 이걸 기반으로 시스템을 만드는데 이때 완제품 사용을 위한 가이드나 툴팁 등도 만들게 되고, 최종적으로 operation단계에서 이 툴팁을 기반으로 써먹는다.

정세린: 저도 비슷하게 작성했는데, 
Conceptual design과 procurement을 통해, system의 요구사항, 목적, 특징들을 명세화 한 후, 어떻게component들이 구성이 되며, 어떤 방식을 조달할 지에 대한 결정을 한다. 
이후 development 과정에서 component들의 구성이 이루어진다. 
그러한 과정을 거친 후에, operation과정을 거쳐 system이 운용이 올바르게 이루어져야한다. 이 모든 과정은 시스템의 요구사항이 모두 충족될 때까지 반복된다.


정세린: 이렇게 적었습니당

안이은: 다들 비슷하게 적은 것 같네요! Conceptual design에서 시스템의 요구사항, 목적, 컨셉들을 문서화 한 후 Procurement에서 component 들을 직접 구현할지 구매가능한 것들은 구매할지 결정하고, development 과정에서 components들을 살건 사고 구현할건 하면서 구성을하고 operation에서 배포한다 이렇게 적었습니다.

박정인: procurement와 development는 서로 equipment와 소프트웨어 업그레이드를 주고 받는 관계에 있고, 개발의 경우 이후 evolution과의 deployment와 system evolution을 주고 받는 관계에 있는 듯합니닫.

양유진: System engineering process consists of conceptual design, procurement, development, and operation. Conceptual design is a stage where purpose of the system is defined. Procurement is
a stage where high-level system requirements are defined and decisions about purchase of software is made.

System engineering 프로세스는 conceptual design, procurement, development 그리고 operation으로 구성된다. Conceptual design은 시스템의 목적이 정의되는 단계이다 Procurement는 high-level 시스템 요구사항이 정의되고 소프트웨어를 구매할지에 대한 결정을 하는 단계라고 적었습니다. 딴 생각했는지 뒤에는 빼먹었네요... 추가해서 올리도록 하겠습니다.

안이은: 추가적으로 operation이후에 기능 추가나 버그 수정등을 위해서 development나 procure과정으로도 돌아갈 수 있다는 것도 적어두었네요..

박정인: 마찬가지로 conceptual design의 경우 전 단계에 걸쳐서 system vision을 제공하지 않을까요

김지훈: 일반적으로 Conceptual design -&gt; procurement -&gt; development -&gt; operation을 순서를 통해서 이루어지는데.
일련의 과정을 하면서 단방향적으로 이루어지는 것이 아니라 각 단계들을 iterate 하면서 돌아간다

김지훈: 그러면 왜 iterate를 하는 이유에 대해서 더 적어볼까요?

김지훈: 버그나 기능수정 : opeartion -&gt; develop으로 돌아가는 것

안이은: COTs하려고 했던 components들 중에 기존 시스템과 서로 호환이 되지 않거나 사용할 수 없는 opensource의 경우에 새로운 open source를 찾거나 개발하는 경우 develop에서 procurement

안이은: 일것같습니당

정세린: 6번 얘기할까용??

양유진: Standard나 needs 등의 requirements가 변하면 conceptual design 단계로 돌아가는 것도 가능한것 같습니다.

안이은: 네 6번으로 넘어가볼게요

안이은: 저희 6번전에

김지훈: 차라리 5번

안이은: 네네

김지훈: 해봅시다

김지훈: To improve the speed.
There can be unexpected problem in next step and that problem should aspect in previous step

김지훈: 개발하는 분야 자체를 서브시스템으로 나눠야지 parallel이 가능하다

이성원: 그렇게 해야 오류가 생겨도 겹쳐서 꼬이는 propagation이 최소화될 것 같아요

안이은: 애초에 초기 계획자체를 정확히해둬야할것같아요

양유진: 저도 동의해요

정세린: 저도 동의합니다

양유진: plan을 잘 세워서 다른 development process에 영향 받지 않고 plan에 따라 개발만 할 수 있게 해야 parallel하게 개발할 수 있을것 같아요

김지훈: 요구사항을 잘 정의해두는것도 중요할것 같아요. 우리는 무엇을 할건데(fucntion) 무엇을 어디로 받고(input) 무엇을 어디로 보내는지(output)

이성원: 그런 의미에서 병렬 개발을 할때는 좀 더 명확하게 프로토콜이나 템플릿을 획일화 해두는게 좋을것같아요

양유진: 네 저는 그걸 plan이라고 표현한것 같아요

박정인: 저 같은 경우 여러 전문가들이 섞여있기 때문에 서로의 전문적 영역에 대한 의사소통 과정이 더욱 필요하다고 봅니다. 아마 plan과 겹치는 사항인 듯 합니다

이성원: 병렬이라는 데에 중점을 두고 고려할 사항이니

이성원: 이정도면 잘 짚어낸 것 같아요

안이은: 그럼 7번으로 넘어가도괜찮을까요?

박정인: 동의합니다

이성원: 네 좋습니다

정세린: 좋습니다!

안이은: 세린님먼저

안이은: 말씀해주실 수 있나요?

정세린: 넵넵

정세린: procurement 과정은 특정 조직의 요구에 따라 system(set)을 acquire하는 과정으로, 시스템의 범위, 가용시간/예산, 높은 수준의 시스템의 요구사항을 고려하며 무엇을 조달할 것인지 결정하는 단계이다. 

양유진: system engineering 모든 단계가 system에 영향을 미칠수 있다 생각했는데 procurement가 특히 functionality에 영향을 미치는것 같아요

박정인: 만약 시스템이나 공급자가 잘못 골라진다면, 원래 계획에서 의도치 않은 사항이나, 기능 부족, 통합 시 잘못된 연결 등 여러 문제가 일어날 수 있다고 봅니다.

정세린: Procurement 단계에서 옳지 못한 결정은 늦은 배포, 전달 혹은 작동 환경에 적합하지 않는 개발을 초래할 수 있다고도 적었습니다

이성원: 아웃소싱해온 요소라 직접 만든 요소보다도 오류가 propagate되는데에 취약할수도 있지 않을까 생각합니다

안이은: 그 예산이나 시간도 procurement에서 결정하니까, testing부분에서도 시간이나 예산문제로 충분히하지 못했을때 에러가 더 많이 발생할수 있어서 reliability가 떨어질 것 같아요!

김지훈: 비효율적으로 예산을 낭비하는 일이 생길수도 있겠네요

김지훈: cost 뿐만이 아니라 시간 역시 고려 요소라고 하셨어요

안이은: 이제 8번으로 넘어가도 괜찮을까요?

정세린: 좋습니다!!

김지훈: Requirement engineering
Architectural design
Requirements partitioning
Subsystem engineering
System integration
System testing
System deployment

김지훈: 7개가 나오는데

김지훈: Requirement engineering -&gt; 사용자의 니즈를 잘 맞추고 있는지

양유진: 저는 시스템의 구성요소들의 dependability가 development process에 의해 결정되는데, 각각의 process가 서로에게 영향을 주기 때문에 하나의 activity가 전체 시스템 dependability에 영향을 줄 수 있다 적었습니다.

박정인: 예시를 들자면, requirement 를 정의할 때, 원치않는 특성을 제대로 정의하지 않고 개발을 한다면 잘못된 동작과 보안 상의 해를 끼칠수 있다고 봅니다

안이은: 유진님 말씀처럼 Architectural design에서는 components들의 구성과 상호작용 설계가 정확히 이루어져야 추후에 integrating할때도 문제가 발생하지 않을것 같습니다

정세린: 저도 유진님과 비슷하게 작성했습니다. 
개발 과정은 평행적으로 진행된다. 이로 인해 각 서브시스템간의 통합이 일어나므로 전반적인 system dependability에 영향을 미칠 수 있다.
라고 적었네요

안이은: 위에 reliability에 시간이나 예산이 문제가 될 수 있다고 했는데, testing을 충분히 거치지못하면 결국 dependability에도 영향을 미칠 것 같아요

안이은: 저희 10번 마지막으로 진행해도 될까요??

안이은: 아 9번

박정인: 넵

김지훈: Compiler
Ignore strange input
Predictive text input

정세린: 넵넵

박정인: zero-division problem 도 넣을 수 있을것같아요

안이은: 저는 ux/ui적으로 warning띄우는거랑

안이은: 권한제한..

양유진: 저는 명확한 UI, 경고 메시지, 접근 제한을 예시로 들었습니다

안이은: 요런거로적었어요

이성원: 이진탐색법으로 디버깅하는 경우도 생각해봤습니다

양유진: 네네 저도 실제 deploy에 초점을 맞췄어요

안이은: 명확한 UI라고하시는건 직관적이고 사용이 쉬운 UI를 말씀하시는거죠?

양유진: 네네

정세린: 저는 human error으로 인한 피해가 최소화되기 위해 barrier이 필요한 경우로 믄제를 해석했어서

양유진: 폰트나 색깔이 여기에 포함이 될 수 있다고 생각해요

이성원: 단순히 값만 고려한 UI가 아니라 심리적으로 와닿는 부분도 고려해야한다는거죠

정세린: Human error으로 인해 인명 피해가 발생할 수 있는 air traffic cntrol시스템엔

정세린: 배리어가 필요하다고 적었는데 ㅋㅋㅋㅋ 문제이해를 잘못한 것 같어요

양유진: 꼭 deploy 단계가 아니더라도 procurement에서 평가하고 하는 부분도 사람의 주관성이 개입하는거라 error가 생길 수 있을 것 같습니다.

안이은: 좋은의견이..많네요..

안이은: 그럼 마지막으로 10번 진행하겠습니다!

양유진: 넵 !

안이은: 저는 10번에서 구매가능한 COTs가 없는 경우 기술적으로 개발이 가능한지,, 그부분에 cost가 많이 소비될 것 같습니당 시간적인거든 돈문제든..

김지훈: 새로운 기술이 기존의 시스템에 ideal 하지 않아서, 최적화 시키는데 추가비용이 발생한다

김지훈: 기존의 시스템은 그 변화를 받아들일 고려를 안했기 때문에 기존의 시스템에 많은 변화가 주어저야 한다

박정인: 여러 측면 ( 비지니스, 기술적 ) 에서 다시 고려를 해야되기 때문에, 모든 측면을 고려하기 위해 또 비용이 추가 된다고 생각합니다

이성원: 저는 완성된 시스템이면 components끼리 서로 잘 엮여서 운영중일텐데, 새로운 component를 추가해서 다시 구성하는 비용이 새로 개발하는 비용이랑 비슷하지 않은가 생각합니다.

김지훈: 기존의 시스템이 재대로 추가되기 위해서는 기존의 시스템의 모든 단계에 대한 분석이 이루어저야 하고 이는 추가 비용을 발생시킨다

양유진: 저는 처음 design하고 하는 단계에서 명확한 기준을 가지고 문서화시켜서 개발하지 못하는 경우가 많아서 최초의 기준을 기반으로 evolution하기에 어려움이 있을것 같다는 의견도 적었어요

정세린: 서브시스템 사이의 interact 과정에서 예상 외의 문제가 발생할 수 있고, 또 system의 구조는 변화가 있을 때, 손상이 있을 수 있어 이를 해결하는 과정에서 비용이 발생할 수 있다

정세린: 라고 적었습니다!!

이성원: 그  design단계에서 기준이 명확하지 않다는게 당시에 충분히 논의되지 않고 개발에 착수된 경우 말씀하시는건가요?

양유진: 그럴수도 있고 모든 결정에 항상 명확한 기준을 가지고 결정하기 어려운 문제 자체도 있는것 같아요

안이은: 그럼 오늘의 토론은 여기까지 하면 될 것 같습니다! 혹시 추가할 내용 있으신가요??

양유진: questions from your ownself는 각자 하는걸로 하는건가요 ?

이성원: 여기서 나온 토론 내용으로 더 찾아봐ㅏ도 좋을것같아ㅏ요

이성원: *더 생각해봐도

안이은: 혹시.. 질문이나 그에 대한 답을 공유하고싶으신가욥?

김지훈: 전 좋아요

김지훈: 근데 아직 안했는데

김지훈: 하고 올릴까요?

양유진: 구글 드라이브상으로만 참고하는걸로 할까요 ?

안이은: 음 개인 질문은 각자 작성후에 구글드라이브에 올려주세요1

안이은: !!

양유진: 네네

안이은: 그럼 여기서 마무리 하겠습니다!

안이은: 늦은시간까지 고생많으셨어요~

양유진: 늦은 시간 고생많으셨습니다

이성원: 고생 많으셨습니다!!:pray:

정세린: 다들 고생 많으셨습니다!!!

